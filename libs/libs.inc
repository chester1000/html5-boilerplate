<?
    /*
     * ALL REQUIRED PHP LIBRARIES
     */

/** respond **
 * RESPOND WITH VALID JSON STRING (FROM AJAX)
 **
 * $success (bool)   => if AJAX operation succeded
 * $cause   (string) => very quick explanation: "<type> <operation> <operation parameter>" (ex. "mysql insert user")
 * $more    (array)  => any additional info that can be usefull
 **
 * returns nothing;
 * > exits execution and prints JSON
 **/
function respond($success, $cause, $more="") { // respond with normalized JSON format from all files requested by ajax
    $respond = array('success'=>$success,'cause'=>$cause,'more'=>$more);
    toLog($respond, "ajax");
    exit(json_encode($respond));
}

/** utf-8 **
 * WORD WRAP FOR UTF-8 STRINGS
 **
 * $str   (string)  => string to be wrapped
 * $width (integer) => how often to cut
 * $break (string)  => what to insert in breaks
 * $cut   (boolean) => should function cut words
 **
 * returns cutted string
 **/
function ww_utf8($str, $width, $break, $cut = false) { // word-wrap for utf-8 text
    if(!$cut) $regexp = '#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){'.$width.',}\b#U';
    else      $regexp = '#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){'.$width.'}#';

    if (function_exists('mb_strlen')) $str_len = mb_strlen($str,'UTF-8');
    else $str_len = preg_match_all('/[\x00-\x7F\xC0-\xFD]/', $str, $var_empty);

    $while_what = ceil($str_len / $width);
    $i = 1;
    $return = '';
    while($i < $while_what) {
        preg_match($regexp, $str,$matches);
        $string = $matches[0];
        $return .= $string.$break;
        $str = substr($str, strlen($string));
        $i++;
    }
    return $return.$str;
}

/** log **
 * LOGGING FUNCTION
 **
 * $str  => string to be logged
 * $type => type of logging:
 *  - access: all non-error ACTIONS generated by users
 *  - user  : same as 'access'
 *  - error : all possible ERRORS generated by users
 *  - admin : all important access/error actions generated by ADMIN
 *  - ajax  : all ajax actions (invoked from PHP:respond() and JS:log() )
 **
 * returns given string
 **/
function toLog($str,  $type="access") { // log given string of given type (optional: for given user)

    $log_path = dirname(__DIR__);

    switch( $type ) {
        case 'error':
            $fname = 'err.log'; break;
        default:
        case 'access':
        case 'user':
            $fname = 'general.log'; break;
        case 'admin':
            $fname = 'admin.log'; break;
        case 'ajax':
            // TODO: fix output format of presented ajax requests
            $fname = 'ajax.log'; break;
    }

    $log_str = date('[Y-m-d H:i:s]') . " " . preg_replace('/\s+/', ' ', str_replace("\n", "", ((is_array($str)) ? print_r($str, true) : $str ) ))." ip => " . getIP() . ", user-agent => " . $_SERVER['HTTP_USER_AGENT'] . "\n";

    // save to general log files
    $f = fopen($log_path . "/log/" . $fname, "a+");
    fwrite($f, $log_str);
    fclose($f);

    // return logged string
    return $str;
}

/** ip **
 * GETS CURRENT USER IP
 **
 * returns ip of current user
 **/
function getIP() { // get IP of current connection; called from toLog
    $ip = (empty($_SERVER['HTTP_CLIENT_IP']) ?
        (empty($_SERVER['HTTP_X_FORWARDED_FOR']) ?
            $_SERVER['REMOTE_ADDR'] : $_SERVER['HTTP_X_FORWARDED_FOR']) : $_SERVER['HTTP_CLIENT_IP']);
    return str_replace("unknown, ", "", $ip);
}

?>